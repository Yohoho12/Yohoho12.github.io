---
layout: post
title:  "PerformanceTesting chapter1"
date:   2018-02-25 15:35:13 +0530
categories: PerformanceTest
---

## 성능테스트의 핵심 활동

1. 테스트 환경 식별
  - 실제 테스트 환경과 테스트 팀에서 사용할수 있는 도구와 리소스를 확인해야 한다.
2. 성능 수용 기준 식별
  - 응답시간, 처리량, 리소스 사용 목표 및 제약을 식별해야한다.
  - 일반적으로 응답시간은 사용자의 관점이며 처리량은 시스템 관점이다.
3. 테스트의 계획 및 디자인
  - 핵심 시나리오를 식별
  - 대표 사용자간의 가변성 그리고 그것을 어떻게 시뮬레이션 할지를 결정
  - 테스트 데이터를 정의
  - 수집 할 메트릭스 설정
4. 테스트 환경 구성
  - 테스트 환경, 툴, 리소스를 준비
  - 필요에 따라 자원 모니터링을 위한 환경 구축
5. 테스트 디자인 구현
6. 테스트 실행
  - 테스트와 테스트 데이터 및 결과 수집의 유효성 검사
7. 결과 분석, 보고, 재검사
  - 결과 데이터의 통합 및 공유
  - 나머지 테스트의 우선순위 재지정 및 재검사

## 성능 테스트의 이유

- 배포 준비 상태 평가
- 인프라 적합성 평가
- 소프트웨어 성능의 적절성 평가
- 성능 튜닝의 효율성 향상

## 프로젝트 컨텍스트

성능 테스트가 성공하기 위해서는 성능 테스트 방법과 테스트 자체가 프로젝트 컨텍스트와 연관이 있어야 한다.
프로젝트 컨텍스트에 대한 이해가 없으면 성능 테스터는 자신이 중요하다고 생각하는 부분에만 집중할 수밖에 없으며
이는 시간낭비로 이어진다.

## 성능 테스트와 튜닝의 관계

end-to-end 성능 테스트에서 용납될수 없는 시스템의 경우 성능 테스트에서 성능 튜닝으로 집중하게 된다.
이때 튜닝은 테스터의 책임은 아니지만 튜닝 프로세스의 경우 제품 공급업체, 아키텍트, 개발자, 테스터, DBA, 시스템관리자,
네트워크 관리자 같은 시스템 관련자의 협업 아래에서 가장 큰 효율을 보여준다.

## 성능, 부하 및 스트레스 테스트
- 성능 테스트: 속도, 확장성, 안전성 특성을 결정하거나 유효성을 검사한다.
- 부하 테스트: 성능 테스트의 하위 항목이며 생산 작업 중에 작업로드나 로드볼륨에 종속 될때 성능 특성의 유효성을 검사한다.
- 스트레스 테스트 : 생산 작업 중에 예상되는 조건을 초과 할 때 테스트중인 시스템의 성능을 검증한다.

## Baselines
baseline을 만드는 것은 시스템의 성능 향상을 위한 후속 변경의 효과를 평가하기 위해 성능 메트릭 데이터를 캡처하기 위한
프로세스이다. 기준선의 중요한 점은 비교를 위해 변경되는 부분을 제외한 부분은 불변 상태를 유지해야 한다는 것이다. 만약
다른부분에서 변경이 일어난다면 baseline 측정은 유효한 비교 자료가 되지 못한다.

## BenchMarking
benchmarking은 시스템 성능을 내부적으로 작성한 기준 또는 다른 조직에서 승인한 업계 표준과 비교하는 프로세스이다.
