---
layout: post
title:  "PerformanceTesting part 2"
date:   2018-03-01 16:22:21 +0530
categories: PerformanceTest
---

# 모범적인 성능 테스트 접근법

## 웹 응용 프로그램 성능 테스트 핵심 활동

### Activity 1 테스트 환경 식별
  - input
    - 논리적 및 물리적 생산 아키텍처
    - 논리적 및 물리적 테스트 아키텍처
    - 사용 가능한 도구
  - output
    - 테스트 환경과 프로덕션 환경 비교
    - 환경 관련 문제
    - 추가 툴이 필요한지 여부 결정

### Activity 2 성능 수용 기준 식별
  - input
    - 고객의 기대
    - 완화해야 할 위험
    - 비즈니스 요구 사항
    - 계약 상 의무
  - output
    - 성능 테스트 성공 기준
    - 성과 목표 및 요구 사항
    - 조사 주요 분야
    - 핵심 성과 지표
### Activity 3 테스트의 계획 및 설계
  - input
    - 사용 가능한 응용 기능 및 구성 요소
    - 응용 프로그램 사용 시나리오
    - 단위 테스트
  - output
    - 개념적 전략
    - 테스트 실행 전제 조건
    - 필요한 도구 및 리소스
    - 시뮬레이션 할 응용 프로그램 사용 모델
    - 테스트 구현에 필요한 테스트 데이터
### Activity 4 테스트 환경 구성
  - input
    - 개념적 전략
    - 사용 가능한 도구
    - 설계된 테스트
  - output
    - 구성된 로드 생성 및 리소스 모니터링 도구
    - 성능 테스트를 위한 환경 준비
### Activity 5 테스트 디자인 구현
  - input
    - 개념적 전략
    - 사용 가능한 도구
    - 설계된 테스트
    - 사용 가능한 응용 기능 및 구성 요소
  - output
    - 검증되고 실행 가능한 테스트
    - 검증 된 리소스 모니터링
    - 검증 된 데이터 수집
### Activity 6 테스트 실행
  - input
    - 작업 실행 계획
    - 사용 가능한 도구 / 환경
    - 검증되고 실행 가능한 테스트
  - output
    - 테스트 실행 결과
### Activity 7 테스트 결과 분석, 보고, 재검사
  - input
    - 작업 실행 결과
    - 성능 수용 기준
    - 위험, 관심사 및 문제
  - output
    - 분석 결과
    - 권장 사항
    - 보고서

## 반복 기반 프로세스로 성능 테스트 조정
선형적인 관점에서 본 접근법은 소프트웨어 개발 프로젝트 전체를 검토하고 이해 관계자가 프로젝트에서 성능 테스트를 포함하도록 선택한 이유 및 성능 테스트가 프로젝트에 가져올 것으로 기대되는 가치를 조사함으로써 시작된다. 이 테스트의 결과에는 성과 테스트 노력을위한 성공 기준에 대한 팀의 견해가 포함된다.
성공 기준을 높은 수준에서 이해하면 전반적인 전략이 개발 수명주기 동안 다양한 지점에서 성능 테스트 활동이 가장 많은 가치를 부여 할 것으로 예상되는 것을 요약하여 해당 기준을 달성하는 일반적인 방법을 안내한다. 이러한 포인트에는 주요 프로젝트 딜리버리, 체크 포인트, 스프린트, 반복 또는 매주 빌드가 포함될 수 있다. 이 장에서는 이러한 이벤트를 총칭하여 "성능 빌드"라고한다. 전략이 진화하는 동안 성능 전문가 또는 팀이 성능 테스트 환경과로드 생성 환경을 설정하기 시작한다 .
전략을 염두에두고 필요한 환경을 마련한 테스트 팀은 임박한 성능 빌드를 위해 확인 된 주요 테스트 또는 작업에 대한 계획을 작성한다. 성능 빌드가 제공되면 계획의 작업은 우선 순위 순서대로 (현재 사용 가능한 모든 정보를 기반으로) 실행되어야하며, 적절하게보고, 기록, 수정, 우선 순위 지정, 추가 및 제거하고 응용 프로그램 및 전체 계획을 작업으로 개선해야한다

### Activity 1 프로젝트 비전과 컨텍스트 이해
  - output
    - 프로젝트 비전과 상황에 대한 공통된 이해
### Activity 2 성능테스트의 이유 식별
  - output
    - 성능 테스트의 이유를 명시 적으로 확인
### Activity 3 프로젝트에 추가된 성능 테스트의 가치 식별
  - output
    - 프로젝트 및 비즈니스 수준의 목표를 구체적이고 식별 가능하며 관리하기 쉬운 것으로 변환
### Activity 4 테스트 환경 구성  
  - output
    - 집합 적으로 성능 테스트 환경으로 알려진 부하 생성 도구 및 테스트중인 시스템을 설정
### Activity 5 과제 식별 및 조정
  - output
    - 지원, 자원 및 일정의 우선 순위를 지정하고 조정하여 작업을 효율적이고 성공적으로 수행
### Activity 6 작업 실행
  - output
    - 현재 반복에 대한 활동을 실행
### Activity 7 결과 및 보고서 분석
  - output
    - 팀과 결과를 분석하고 공유
### Activity 8 Activity 1~3 재실행, 성능 수용 기준 고려
  - output
    - 반복 작업간에 기본 정보가 변경되지 않았는지 확인
    - 고객 피드백과 같은 새로운 정보를 통합하고 필요에 따라 전략을 업데이트
### Activity 9 업무 우선순위 재결정
  -output
    - 테스트 결과, 새로운 정보 및 기능 및 구성 요소의 가용성을 기반으로 전략에서 작업 우선 순위 지정, 추가 또는 삭제

## 애자일 성능 테스트주기 관리
선형적인 관점에서 본 접근 방식은 소프트웨어 개발 프로젝트 전체를 검토하고 이해 관계자가 프로젝트에서 성능 테스트를 포함하도록 선택한 이유 및 성능 테스트가 프로젝트에 추가 할 것으로 예상되는 가치를 조사함으로써 시작된다. 이 시험의 결과에는 성과 테스트 노력의 성공 기준에 대한 팀의 견해가 포함된다.
성공 기준을 높은 수준에서 이해하면 전반적인 전략이 개발 수명주기 동안 다양한 지점에서 성능 테스트 활동이 가장 많은 가치를 부여 할 것으로 예상되는 것을 요약하여 해당 기준을 달성하는 일반적인 방법을 안내한다. 이러한 포인트에는 주요 프로젝트 인도 물, 체크 포인트, 스프린트, 반복 또는 매주 빌드가 포함될 수 있다. 이 장의 목적을 위해 이러한 이벤트를 총칭하여 "성능 빌드"라고한다. 종종 전략이 진화하는 동안 성능 전문가 또는 팀이 성능 테스트 환경과로드 생성 환경을 설정하기 시작한다.
전략을 염두에두고 필요한 환경을 마련한 테스트 팀은 임박한 성능 빌드를 위해 확인 된 주요 테스트 또는 작업에 대한 계획을 작성한다. 성능 빌드가 제공되면 계획의 작업은 우선 순위 순서대로 (현재 사용 가능한 모든 정보를 기반으로) 실행되어야하며, 적절하게보고, 기록, 수정, 우선 순위 지정, 추가 및 제거하고 응용 프로그램 및 전체 계획을 작업으로 개선해야한다

### Activity 1 프로젝트 비전과 컨텍스트 이해
  - 프로젝트 비전 및 컨텍스트는 어떤 성능 테스트 활동이 필요하고 가치가 있는지를 결정하기위한 기초
### Activity 2 성능테스트의 이유 식별
  - 이들은 비전과 컨텍스트에서 항상 명확하지는 않다
  - 성능 테스트의 이유를 명시 적으로 확인하는 것은 어떤 성능 테스트 활동이 프로젝트에 가장 가치를 더할 지 판단 할 수있는 중요한 요소
### Activity 3 프로젝트에 추가된 성능 테스트의 가치 식별
  - 1 단계와 2 단계에서 얻은 정보는 성능 테스트를 통해 추가 된 값을 명확히하고 그 값을 개념적 성능 테스트 전략으로 변환
### Activity 4 테스트 환경 구성  
  - 개념적 전략을 수립하여 기능 및 구성 요소를 테스트 할 수있게됨에 따라 전략을 실행하는 데 필요한 도구와 리소스를 준비
### Activity 5 과제 식별 및 조정
  - 성능 테스트 작업은 별도로 발생하지 않음
  - 성능 전문가는 작업을 효율적이고 성공적으로 수행하기 위해 지원, 리소스 및 일정의 우선 순위를 지정하고 조정하기 위해 팀과 협력한다
### Activity 6 작업 실행
  - 1 ~ 2 일 단위로 작업을 수행
  - 추가 가치를 더하는 기회가 그 자체를 선물한다면 길을 따라 중요한 우회로를 가져 가야함
### Activity 7 결과 및 보고서 분석
  - 반복적 인 프로세스를 따라 가기 위해서는 결과를 신속하게 분석하고 공유
  - 분석이 결정적이지 않은 경우 가능한 한 빨리 재시도
### Activity 8 Activity 1~3 재실행, 성능 수용 기준 고려
  - 반복 작업간에 기본 정보가 변경되지 않았는지 확인
  - 고객 피드백과 같은 새로운 정보를 통합하고 필요에 따라 전략을 업데이트
### Activity 9 업무 우선순위 재결정
  - 테스트 결과, 새로운 정보 및 기능 및 구성 요소의 가용성을 토대로 전략에서 작업 우선 순위 지정, 추가 또는 삭제

## 규제 (CMMI) 환경에서 성능 테스트주기 관리

### Activity 1 프로세스 및 규정 준수 기준 이해
  - 프로세스 및 준수 요구 사항에 대한 이해를 구축하는 작업
### Activity 2 시스템 및 프로젝트 계획을 이해
  - 테스트 할 시스템과 해당 시스템 개발을 위한 프로젝트 세부 사항을 자세하게 이해
### Activity 3 성능 수용 기준 식별
  - 성과 목표 및 요구 사항을 파악
### Activity 4 성능 테스트 활동 계획
  - 작업 항목을 프로젝트 계획에 매핑, 기간을 결정, 작업의 우선 순위를 지정, 계획에 세부 사항을 추가하는 작업
### Activity 5 테스트 디자인
  - 주요 사용 시나리오 식별, 적절한 사용자 차이 결정, 테스트 데이터 식별 및 생성 및 수집 할 메트릭 지정
### Activity 6 테스트 환경 설정
  - 실제 테스트 환경 설정
### Activity 7 테스트 디자인 구현
  - 테스트를 만든다
### Activity 8 작업 항목 실행
  - 성능 테스트 작업 항목을 실행하는 작업
### Activity 9 결과보고 및 자료 보관
  - 결과를 통합하고 팀간에 데이터를 공유하는 작업
### Activity 10 계획 수정 및 수정 승인
  - 필요에 따라 계획 검토 및 조정
### Activity 11 활동 5로 돌아가기
  - 다음 딜리버리, 반복 및 체크 포인트 릴리스를 통한 지속적인 테스트
### Activity 12 최종 보고서 작성
  - 최종 보고서의 작성, 제출 및 수락
