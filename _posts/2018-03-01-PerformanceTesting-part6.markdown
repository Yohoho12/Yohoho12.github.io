---
layout: post
title:  "PerformanceTesting part 6"
date:   2018-03-01 19:46:03 +0530
categories: PerformanceTest
---

# 테스트 실행

## chapter 14 테스트 실행

### 테스트 환경 검증
  - 테스트 환경이 메트릭 수집을 위해 올바르게 구성되었는지 확인해야한다
  - 바이러스 백신 소프트웨어에 의한 리소스 소비의 부작용으로 의도하지 않게 결과 데이터가 왜곡 될 가능성을 최소화하기 위해 테스트 중에로드 생성 컴퓨터에서 활성 바이러스 검색을 해제해야한다
  - 필요한 경우 백그라운드 활동 시뮬레이션을 고려해야한다. 예를 들어, 많은 서버는 사용자 요청을 처리하는 동안 미리 결정된 시간 동안 일괄 처리를 실행한다. 그 기간 동안 그러한 활동을 설명하지 않으면 지나치게 낙관적 인 성과 결과가 발생할 수 있다
  - 가능한 경우 먼저 다른 사용 계층과 별도로 간단한 사용 시나리오를 실행하여 웹 서버 계층의 유효성을 검사한다
  - 데이터를 읽는 것으로 제한되는 간단한 사용 시나리오를 실행하여 데이터베이스 시나리오의 유효성을 검사한다
  - 비즈니스 조치를 시뮬레이트하는 테스트 스크립트의 혼합을 사용하여 데이터베이스에 대한 업데이트 및 쓰기로 보다 복잡한 사용 시나리오를 실행하여 테스트 환경의 유효성을 검증한다
  - 웹 팜 환경에서 부하 테스트가 IP 스위칭을 구현하는지 확인한다
  - 모든 서버에서 KPI (핵심 성과 지표)를 사용하여 테스트 환경을 평가한다
  - 테스트 애플리케이션을위한 데이터 피드를 만드는 데 많은 시간을 할애해야한다

### 테스트 검증
로드 시뮬레이션이 불량하면 모든 이전 작업을 쓸모 없게 만들 수 있다. 테스트 실행에서 수집 된 데이터를 이해하려면 부하 시뮬레이션이 테스트 설계를 정확하게 반영해야한다. 시뮬레이션이 테스트 디자인을 반영하지 않으면 그 결과가 잘못 해석되는 경향이 있다. 테스트가 테스트 디자인을 정확하게 반영한다고해도 테스트 결과가 잘못되거나 오도 된 결과를 가져올 수있는 방법은 많이 있다. 단순히 테스트를 신뢰하는 것이 유혹을 불러 일으킬 지 모르지만, 테스트의 정확성을 확인하기 전에 테스트를 신뢰해야 시간과 노력을 들여야 "결과"를 결정하는 데 도움이되는 결과를 얻을 수 있다
  - 테스트 디자인 구현
  - 동시성
  - 테스트 조합
  - 데이터 유효성 테스트

### 동적 데이터
  - 동일한 데이터 값을 사용하면 시스템이 메모리의 복사본에서 데이터를 검색하기 때문에 캐싱이 인위적으로 사용된다. 이는 데이터베이스, 운영 체제의 파일 캐시, 하드 드라이브, 스토리지 컨트롤러 및 버퍼 관리자를 비롯하여 시스템의 여러 계층과 구성 요소 전체에서 발생할 수 있다. 성능 테스트 중에 캐시의 데이터를 재사용하면 실제 결과보다 더 빠른 테스트 결과를 얻을 수 있다
  - 일부 비즈니스 시나리오에서는 상대적으로 작은 범위의 데이터를 선택해야한다. 이 경우 캐시를 더 빈번하게 재사용하는 경우에도 동일한 항목에 대한 쿼리로 인해 발생하는 시간 초과로 인한 데이터베이스 교착 상태 및 응답 시간과 같은 다른 성능 관련 문제를 시뮬레이트한다. 이러한 유형의 시나리오는 마케팅 캠페인 및 계절별 판매 이벤트의 전형이다.
  - 일부 비즈니스 시나리오에서는로드 테스트 중에 고유 한 데이터를 사용해야한다
  - 일부 비즈니스 시나리오에서는 매개 변수화 된 항목 수를 제어해야한다
  - 일부 비즈니스 시나리오에서는 스크립트 크기 또는 스크립트 수를 줄여야한다
  - 부하 테스트에서 동적 테스트 데이터를 사용하면보다 복잡하고 시간에 민감한 버그를 재현하는 경향이 있다
  - 부하 테스트에서 동적 테스트 데이터를 사용하면 테스트 계획에 적합한 경우 오류 값을 사용할 수 있다

### 테스트 유효성 검사
  - 단일 사용자 만 테스트를 먼저 실행해야한다. 이는 초기 유효성 검사를 훨씬 덜 복잡하게 만든다
  - 시험이 진행되는 동안 시험을 관찰하고 비정상적인 행동에 주의를 해야한다
  - 테스트 실행 중에 시스템을 수동으로 사용하여 나중에 관측 값과 결과 데이터를 비교할 수 있다
  - 테스트 결과 및 수집 된 메트릭이 사용자가 의도 한 바를 나타내도록한다
  - 상위 요청 또는 종속 요청이 실패했는지 확인한다
  - 로드 생성 도구는 올바른 페이지 나 데이터가 반환되지 않아도 "통과"하는 요약 결과를보고하기 때문에 반환 된 페이지의 내용을 확인한다
  - 예기치 않은 오류가 있는지 검사하기 위해 모든 데이터를 반복하는 테스트를 실행한다
  - 해당되는 경우 테스트 실행 후 테스트 및 / 또는 응용 프로그램 데이터를 다시 설정할 수 있는지 확인한다
  - 테스트가 끝나면 애플리케이션 데이터베이스가 테스트 설계에 따라 업데이트되었는지 여부를 확인한다
  - 테스트 실패의 원인이 될 수있는 데이터를 제거하기 위해 오류 시연간에 데이터베이스 항목을 정리하는 것이 좋다
  - 하나의 테스트가 다른 테스트에서 필요로하는 데이터를 손상시키지 않도록하기 위해 다양한 조합과 순서로 테스트 실행

### 테스트 실행
실행중인 테스트의 프로세스와 흐름은 도구, 환경 및 프로젝트 컨텍스트에 크게 좌우되지만 테스트 실행시 유의해야 할 보편적 인 작업과 고려 사항이 있다.
테스트중인 응용 프로그램이 적절한 상태에 있고 성능 테스트가 실행되도록 결정되면 테스트는 일반적으로 프로젝트 및 응용 프로그램의 현재 상태를 기반으로 합리적으로 완료 할 수있는 우선 순위가 가장 높은 성능 테스트로 시작된다.
테스트를 실행할 때 가장 중요한 작업 중 하나는 결과 분석이 새로운 우선 순위로 이끄면서 테스트, 테스트 디자인 및 후속 전략을 수정하는 것을 기억하는 것입니다
#### 테스트를 효율적이고 효과적으로 실행하기 위한 핵심
  - 2 일 이내로 성능 테스트 우선 순위 재검토
  - 성과 기준선을 포착하고 사용
  - 응용 프로그램 오류를 수정하거나 테스트 디버깅
  - 테스트 결과를 즉시 수정할 수 있도록 결과를 즉시 분석
  - 테스트 결과를 팀 전체에 공개적으로 자주 전달
  - 결과와 중요한 결과를 기록
  - 나중에 테스트를 반복하는 데 필요한 다른 데이터를 기록
  - 테스트 실행 중 적절한 지점에서 응용 프로그램이 최대한의 용량이나 사용자로드를 요구
  - 응용 프로그램 조정 또는 최적화의 유효성을 확인
  - 응용 프로그램 장애 조치 및 복구의 효과를 평가
  - 다른 시스템 구성의 영향을 측정하는 것을 고려

### 기준선 및 벤치 마크
#### 기준선
  - 시스템, 구성 요소 또는 응용 프로그램에 대한 기준선을 만들 수 있다.
  - 데이터베이스, 웹 서비스 등 다양한 계층에서 기준선을 생성 할 수 있다
  - 기준선은 미래의 최적화 또는 회귀를 추적하기위한 비교의 표준으로 사용될 수 있다
  - 기준선은 추세 분석을위한 알려진 시작점을 제공하여 개발 수명주기 동안 저하 또는 최적화를 나타내는 차이를 제품 팀이 명확하게 나타낼 수 있도록 도와준다. 베이스 라인은 재사용 가능한 테스트 자산 집합을 사용하여 생성 된 경우 가장 가치가 있다
  - 기본 결과는 응답 시간, 프로세서, 메모리, 디스크 및 네트워크와 같은 핵심 성능 지표의 조합을 사용하여 표현할 수 있다
  - 팀 전반의 기준 결과 공유는 성능 특성에 대한 정보의 공통 토대를 구축하여 응용 프로그램 또는 구성 요소의 성능 변화에 대한 향후 통신을 가능하게한다.
  - 기준선은 응용 프로그램에 따라 다르며 다른 빌드, 버전 또는 릴리스에서 성능을 비교하는 데 가장 유용하다.
  - 구성 변경을 수행하기 전에 기준선을 설정하면 변경 사항이 응용 프로그램의 성능에 어떤 영향을 미치는지 신속하게 판단 할 수 있으므로 거의 시간이 절약된다.
#### 벤치마킹
  - 산업 표준 내에서 작업하거나 기존 구현을이 스펙을 준수하도록 이식함으로써 벤치 마크 점수를 얻을 수 있다
  - 벤치마킹에는 일반적으로 함께 실행되는 모든 필요한 구성 요소, 제품이있는 시장 및 측정 할 특정 메트릭을 식별해야한다
  - 벤치 마크 점수는 공개적으로 게시 될 수 있으며 경쟁 업체가 비교를 할 수도 있다. 벤치 마크 점수와 함께 포함될 수있는 성능 측정 항목에는 응답 시간, 시간당 처리 된 트랜잭션, 시간당 액세스 된 웹 페이지, 프로세서 사용량, 메모리 사용량 및 검색 시간이 포함된다

### 아카이브 테스트
어느 정도의 변경 제어 또는 버전 제어는 각 테스트 실행 사이의 스크립트, 시나리오 및 데이터 변경 사항을 관리하고 이러한 차이점을 나머지 팀에 알리는 데 매우 유용 할 수 있다. 일부 팀은 테스트 스크립트, 결과 및 보고서를 응용 프로그램의 빌드와 동일한 버전 제어 시스템으로 확인하는 것을 선호한다. 다른 팀은 주기적으로 날짜순 폴더에 복사본을 저장하거나 성능 팀 전용 버전 제어 소프트웨어를 보유하고 있다. 그것은 당신과 당신 팀이 당신에게 가장 적합한 방법을 결정하는 것이지만, 대부분의 경우 보관 테스트, 테스트 데이터 및 테스트 결과는 성능 테스트 프로젝트를 수행하는 것보다 훨씬 많은 시간을 절약한다.
